{
    "lecture_title_html": "[1-1] HTML 개요,[1-2] HTML 기초,[1-3] HTML 기본 구조,[1-4] HTML 요소 구조,[2-1] HTML 텍스트 요소,[2-2] 단락 (Paragraph),[2-3] 서식,[2-4] 인용구,[2-5] 주석,[2-6] 엔티티,[2-7] 문자셋,[3-1] HTML 스타일,[3-2] HTML 색", 
    "lecture_title_css": "[1-1] CSS 개요,[1-2] CSS 기초,[1-3] CSS 문법,[1-4] CSS 적용",
    "lecture_title_node": "[1-1] Node.js 개요,[1-2] GET 요청하기",
    "lecture_title_py": "[1-1] Python 강의 개요",
    "[1-1] HTML 개요": "HTML은 웹 페이지를 만드는 데 사용하는 언어이며 매우 쉽게 배울 수 있습니다.  꿣모든 태그는 미리 정의되어 있으며, 각각의 태그와 속성을 사용하기만 하면 됩니다.  꿣HTML 수업 시작 => [Try it!]  여러분이 직접 코드를 변경하고, 그 결과를 확인할 수 있는 에디터가 준비되어 있습니다.",
    "[1-1] HTML 개요_ex": "<!DOCTYPE html>꿣<html lang='ko'>꿣꿣<head>꿣    <meta charset='UTF-8'>꿣    <title>HTML Intro</title>꿣</head>꿣꿣<body>꿣꿣    <h1>여러분을 환영합니다!!</h1>꿣</body>꿣꿣</html>",
    "[1-2] HTML 기초": "[1-2]HTML 태그(tag) HTML 태그는 태그 이름을 꺾쇠 괄호(<>)로 감싸서 표현합니다.꿣문법꿣1. <태그이름> 시작 태그 꿣2. </태그이름>종료 태그꿣HTML 태그는 보통 시작 태그(start tag, opening tag)와 종료 태그(end tag, closing tag)의 한 쌍으로 구성됩니다.종료 태그는 시작 태그와 전부 똑같지만, 태그 이름 앞에 슬래시(/)가 존재합니다.태그에 따라 시작 태그만 있고 종료 태그가 없는 태그도 존재합니다.꿣<img> <br> <hr> 등과 같이 종료 태그 없이 시작 태그만을 가지는 태그를 빈 태그(empty tag)라고 합니다. 버전    년도    DOCTYPE 및 설명꿣HTML 1.0    1991    팀 버나스리(Tim Berners-Lee)가 발표한 최초의 HTML꿣HTML 2.0    1995    국제 표준으로 제정된 최초의 HTML꿣HTML 3.2    1997    W3C에 의해 제정된 최초의 HTML꿣HTML 4.01    1999꿣<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01//EN'꿣꿣'http://www.w3.org/TR/html4/strict.dtd%22%3E꿣XHTML 1.0    2000꿣<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'꿣꿣'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd%22%3E꿣HTML 5    2014    <!DOCTYPE html>'HTML의 최신 버전인 HTML5에 대한 더 자세한 정보를 원한다면, W3C 공식 사이트를 방문하여 확인할 수 있습니다.꿣W3C HTML5 : W3C Recommendation 28 October 2014 =>[https://www.w3.org/TR/html5/]꿣W3C꿣W3C는 World Wide Web Consortium의 약자입니다.꿣꿣W3C는 월드 와이드 웹(WWW)을 위한 표준을 제정하고 관리하는 중립적인 기관입니다.꿣꿣꿣이러한 W3C가 관리하는 대표적인 웹 표준은 다음과 같습니다.꿣꿣1. HTML꿣꿣2. CSS꿣꿣3. DOM꿣꿣4. SVG꿣꿣5. XHTML꿣꿣6. XML",
    "[1-2] HTML 기초_ex": "<h1>제목 1</h1>꿣꿣<h2>제목 2</h2>꿣꿣<h3>제목 3</h3>꿣꿣<p>단락 1</p>꿣꿣<p>단락 2</p>",
    "[1-3] HTML 기본 구조": "[1-3]HTML 기본 구조꿣HTML 기본 구조꿣다음은 HTML 문서의 기본적인 구조를 보여주는 그림입니다.<!DOCTYPE html> : 현재 문서가 HTML5 문서임을 명시합니다.꿣꿣<html> : HTML 문서의 루트(root) 요소를 정의합니다.꿣꿣 꿣<head> : HTML 문서의 메타데이터(metadata)를 정의합니다.꿣꿣- 메타데이터(metadata)란 HTML 문서에 대한 정보(data)로 웹 브라우저에는 직접적으로 표현되지 않는 정보를 의미합니다.꿣- 이러한 메타데이터는 <title>, <style>, <meta>, <link>, <script>, <base>태그 등을 이용하여 표현할 수 있습니다.꿣꿣꿣꿣<title> : HTML 문서의 제목(title)을 정의하며, 다음과 같은 용도로 사용됩니다.꿣꿣- 웹 브라우저의 툴바(toolbar)에 표시됩니다. 꿣꿣- 웹 브라우저의 즐겨찾기(favorites)에 추가할 때 즐겨찾기의 제목이 됩니다.꿣꿣 - 검색 엔진의 결과 페이지에 제목으로 표시됩니다.꿣꿣꿣<body> : 웹 브라우저를 통해 보이는 내용(content) 부분입니다.꿣꿣꿣<h1> ~ <h6> : 제목(heading)을 나타냅니다.꿣꿣꿣꿣<p> : 단락(paragraph)을 나타냅니다.", 
    "[1-3] HTML 기본 구조_ex": "예제가 없습니다.",
    "[1-4] HTML 요소 구조": "HTML 요소(element)는 여러 속성을 가질 수 있으며, 이러한 속성(attribute)은 해당 요소에 대한 추가적인 정보를 제공합니다.꿣또한, HTML 요소는 시작 태그로 시작해서 종료 태그로 끝납니다. 꿣속성은 HTML 요소 중에서도 언제나 시작 태그 내에서만 정의되며, 속성 이름과 속성값(value)으로 표현됩니다.꿣꿣문법꿣<태그이름 속성이름='속성값'>꿣속성 이름은 언제나 소문자로 작성하자!꿣HTML5 표준에서는 속성 이름에 대소문자를 구분하지 않고 있습니다.꿣꿣하지만 W3C에서는 속성 이름을 사용할 때 될 수 있으면 소문자로 작성하도록 권장하고 있습니다.꿣또한, XHTML에서는 속성 이름을 더욱 엄격하게 소문자로만 사용해야 합니다. 꿣위의 예제와 같이 속성값에 띄어쓰기가 들어가게 되면, 반드시 따옴표를 사용해야 정확한 값을 저장할 수 있습니다.꿣꿣속성값을 감쌀 때는 보통 큰따옴표('')가 사용되며, 작은따옴표(**)도 사용할 수 있습니다.꿣꿣<img>태그의 alt 속성은 이미지를 불러올 수 없는 상황에서 이미지 대신 보이는 문자열을 설정할 수 있습니다. ",
    "[1-4] HTML 요소 구조_ex": "<img src='quotes.jpg' alt='이미지가 없어요'>꿣꿣<img src='quotes.jpg' alt=이미지가 없어요>",
    "[2-1] HTML 텍스트 요소" : "[2-1] HTML 텍스트 요소꿣제목꿣제목(Heading)꿣HTML은 제목을 표현할 수 있는 다양한 크기의 <h>태그를 제공합니다.꿣 꿣가장 큰 <h1>태그부터 가장 작은 <h6>태그까지 다양한 크기로 제목을 표현할 수 있습니다. <h>태그의 위아래로는 약간의 여백이 자동으로 삽입됩니다.꿣 꿣꿣이런 <h>태그는 제목의 표현이라는 기능 외에도 또 다른 중요한 역할을 하고 있습니다.꿣꿣여러 검색엔진은 각 웹 사이트의 내용을 바로 이 <h>태그를 이용하여 키워드를 수집하고, 그 내용을 파악합니다.꿣꿣따라서 HTML 문서에 포함되는 제목은 <h>태그로 작성해야만 검색엔진에 의해 제대로 검색될 확률을 높일 수 있습니다.꿣꿣꿣HTML 문서의 제목에 해당하는 부분을 <big>태그나 <bold>태그를 사용하여 표현하지 않도록 합니다.꿣종료 태그를 잊지 맙시다!꿣대부분의 웹 브라우저는 종료 태그를 사용하지 않더라도 다음 예제와 같이 HTML 문서를 제대로 표현해 줍니다꿣꿣<h2>종료 태그가 없어도 표현이 잘 될까요?꿣꿣꿣하지만 종료 태그가 없으면 예상치 못한 오류나 결과가 발생할 수도 있습니다.꿣꿣또한, XHTML이나 XML과 같은 문법이 엄격한 언어에서는 종료 태그의 유무를 엄격하게 검사합니다.꿣꿣따라서 가급적 종료 태그를 빠트리지 말고 코드를 작성하는 것이 좋습니다.",
    "[2-1] HTML 텍스트 요소_ex": "<h1>제목1의 크기입니다!</h1>꿣<h2>제목2의 크기입니다!</h2>꿣<h3>제목3의 크기입니다!</h3>꿣<h4>제목4의 크기입니다!</h4>꿣<h5>제목5의 크기입니다!</h5>꿣<h6>제목6의 크기입니다!</h6>",
    "[2-2] 단락 (Paragraph)":"단락이란 내용상 끊어서 구분할 수 있는 하나하나의 부분을 의미하며, 문단이라고도 부릅니다.꿣HTML에서는 <p>태그를 이용하여 이러한 단락을 표현합니다.꿣꿣<p>태그의 위아래로는 약간의 여백(margin)이 자동으로 삽입됩니다.꿣띄어쓰기와 줄 나누기꿣HTML 코드에서 띄어쓰기나 줄 나누기를 여러 번 하더라도 웹 브라우저를 통해 나타나는 화면에는 전혀 영향을 주지 못합니다.꿣웹 브라우저는 여러 번의 띄어쓰기나 줄 나누기를 오직 하나의 띄어쓰기나 줄로만 인식하기 때문입니다.꿣꿣꿣다음 예제는 웹 페이지에 여러 번의 띄어쓰기와 줄 나누기를 표현하기 위해 작성한 예제입니다.꿣꿣꿣위의 예제는 여러 번의 띄어쓰기와 줄 나누기를 표현하고자 <p>태그를 이용합니다.꿣꿣하지만 <p>태그 내에서 작성된 여러 번의 띄어쓰기와 줄 나누기는 오직 하나의 띄어쓰기로만 표현됩니다.꿣꿣꿣<br>태그(break line)를 사용하면 새로운 단락을 만들지 않고도 줄을 나눌 수 있습니다.꿣꿣이러한 <br>태그는 종료 태그가 없는 빈 태그(empty tag)입니다.꿣꿣꿣텍스트(text) 서식 미리 정의하꿣HTML 코드에서 작성한 텍스트 서식을 그대로 표현하려면 <pre>태그를 사용해야 합니다.꿣꿣<pre>태그(preformatted text) 내에 작성된 텍스트의 모든 띄어쓰기와 줄 나누기는 웹 브라우저에 그대로 표현됩니다.꿣꿣<pre>태그 내에 작성된 텍스트의 글꼴(font)은 고정폭 글꼴(fixed-width font)로 자동변환됩니다.꿣수평 가로 구분선꿣단락을 나눌 때나 내용상의 구분을 표현하고자 할 때 수평 가로 구분선을 사용합니다.꿣꿣이렇게 사용되는 수평 가로 구분선을 HTML 코드에서는 <hr>태그(horizontal rule)로 간단하게 만들 수 있습니다.",
    "[2-2] 단락 (Paragraph)_ex": "<h1>제목1의 크기입니다!</h1>꿣<h2>제목2의 크기입니다!</h2>꿣<h3>제목3의 크기입니다!</h3>꿣<p>여기서부터 단락입니다.꿣꿣꿣<p>꿣꿣줄을 나누고 싶어서꿣꿣이렇게 줄을 나눠봤습니다.꿣꿣꿣과연     그대로     출력이     될까요?꿣</p>꿣궗꿣<p>꿣꿣줄을 나누고 싶어서<br>꿣이렇게 줄을 나눠봤습니다.<br>꿣<br>꿣과연     그대로     출력이     될까요? 꿣</p> 꿣꿣꿣<pre>꿣줄을 나누고 싶어서꿣이렇게 줄을 나눠봤습니다.꿣과연     그대로     출력이     될까요?꿣</pre>꿣꿣꿣<p>저는 하나의 단락입니다.</p>꿣<hr>꿣<p>저는 하나의 단락입니다.</p>꿣<hr>꿣<p>저는 하나의 단락입니다.</p>",
    "[2-3] 서식": "서식(Formatting)꿣HTML은 텍스트(text)에 다양한 효과를 주는 여러 태그(tag)를 제공합니다.꿣꿣강조 효과꿣HTML 문서에서 텍스트를 굵게 표현하고 싶을 때에는 <b>태그(bold text)나 <strong>태그를 사용하면 됩니다. 꿣<b>태그는 단순히 화면의 텍스트를 굵게 표현해 줍니다.꿣꿣하지만 <strong>태그는 텍스트를 굵게 표현해줄 뿐만 아니라 그 내용이 중요하다는 의미도 함께 포함해 줍니다.꿣꿣꿣HTML 문서에서 이탤릭체를 표현하고 싶을 때에는 <i>태그(italic text)나 <em>태그(emphasized text)를 사용합니다.꿣<i>태그는 단순히 화면의 텍스트를 이탤릭체로 표현해 줍니다.꿣하지만 <em>태그는 텍스트를 이탤릭체로 변환해줄 뿐만 아니라 그 내용이 중요하다는 의미도 함께 포함해 줍니다.꿣꿣검색엔진은 <strong>태그나 <em>태그를 사용하여 강조된 텍스트를 더 중요하게 인식합니다.꿣하이라이팅 효과꿣<mark>태그는 텍스트에 하이라이팅(highlighting) 효과를 적용시켜 줍니다. 꿣꿣삭제 효과꿣<del>태그(delete)는 텍스트 중앙에 가로줄을 만들어 마치 텍스트를 지운 것과 같은 효과를 내줍니다.꿣<ins>태그(insert)는 텍스트 밑에 가로줄을 만들어 마치 빈칸에 텍스트를 삽입한 것과 같은 효과를 내줍니다.꿣꿣위첨자와 아래첨자 효과꿣위첨자는 <sup>태그(superscript)를 사용하여, 아래첨자는 <sub>태그(subscript)를 사용하여 각각 표현할 수 있습니다.",
    "[2-3] 서식_ex": "<p><b>'이 부분'</b>은 단순히 글씨가 굵은 부분이에요!</p>꿣꿣<p><strong>'이 부분'</strong>은 중요한 부분이라서 굵게 표현됐어요!</p>꿣꿣<p><i>'이 부분'</i>은 단순히 글씨가 이탤릭체인 부분이에요!</p>꿣꿣<p><em>'이 부분'</em>은 중요한 부분이라서 이탤릭체로 표현됐어요!</p>꿣꿣<p><mark>'이 부분'</mark>만 하이라이팅하고 싶어요.</p>꿣꿣<p><ins>'밑줄 친 부분'</ins>에 들어갈 알맞은 말을 고르세요.</p>꿣꿣<p>X<sup>2</sup> + Y<sup>3</sup> = Z</p>꿣꿣<p>물을 나타내는 화학식은 H<sub>2</sub>O 입니다.</p>",
    "[2-4] 인용구": "인용구(Quotation)꿣HTML에서 인용구를 표현하는 방법은 다음과 같이 두 가지로 나뉩니다.꿣꿣 꿣꿣1. 짧은 인용구꿣꿣2. 블록 인용구꿣꿣짧은 인용구꿣짧은 인용구는 <q>태그(quotation)를 사용하여 표현할 수 있으며, 자동으로 앞뒤에 큰따옴표가 붙습니다. 꿣꿣블록 인용구꿣꿣길이가 긴 인용문은 <blockquote>태그(block quatation)를 사용하여 표현할 수 있습니다.꿣<blockquote>태그는 이러한 인용 부분을 별도의 단락으로 구분하여 나타냅니다. 꿣꿣축약형 표현꿣HTML에서 용어의 축약형을 표현하기 위해서는 <abbr>태그(abbreviation)를 사용합니다.꿣<abbr>태그 위에 마우스를 위치시키면 title 속성에 명시한 용어의 원형이 나타납니다.꿣꿣주소 표현꿣<address>태그를 사용하면 HTML에서 주소를 표현할 수 있습니다.꿣이러한 주소는 이탤릭체로 표현되며, 위아래로 약간의 공백이 자동으로 삽입됩니다.",
    "[2-4] 인용구_ex": "<p>HTML의 정의는꿣<q>웹 페이지를 만들기 위한 하이퍼텍스트 마크업 언어</q>꿣입니다.</p>꿣꿣꿣<p>HTML의 정의</p>꿣꿣<blockquote>꿣인터넷 서비스의 하나인 월드 와이드 웹을 통해 볼 수 있는 문서를 만들 때 사용하는 프로그래밍 언어의 한 종류이다.꿣</blockquote>꿣꿣꿣<p><strong><abbr title='HyperText Markup Language 5'>HTML5</abbr></strong>꿣꿣꿣<address>꿣서울특별시<br>꿣강남구 테헤란로꿣</address>",
    "[2-5] 주석": "주석(Comment)꿣주석(comment)이란 개발자가 작성한 해당 코드에 대한 이해를 돕는 설명이나 디버깅을 위해 작성한 구문을 의미합니다.꿣꿣이러한 주석은 다른 HTML 코드와는 달리 웹 브라우저에 의해 표현되지 않습니다.꿣꿣 꿣꿣HTML에서 주석을 표현하는 방법은 다음과 같습니다.꿣꿣문법꿣<!-- 주석내용 -->꿣꿣꿣꿣HTML 주석의 시작 태그(<!--)에는 느낌표(!)가 있지만 종료 태그(-->)에는 느낌표가 없습니다.꿣꿣이러한 주석은 HTML 코드의 어느 부분에서라도 사용할 수 있습니다.꿣꿣또한, 여러 줄에 걸쳐 주석을 작성해도 정확히 인식할 것입니다.꿣꿣HTML 코드에 삽입된 주석을 읽고 싶다면, 웹 브라우저의 페이지 소스 보기 등을 통해서 확인할 수 있습니다.꿣꿣꿣꿣익스플로러는 마우스 오른쪽을 누른 후 소스 보기를 통해서, 크롬과 파이어폭스에서는 F12 버튼으로 HTML 코드를 확인할 수 있습니다.꿣중첩 주석꿣HTML 주석은 HTML 코드의 어느 부분에서라도 사용할 수 있습니다.꿣꿣하지만 HTML 주석 안에 또 다른 주석을 작성할 수는 없습니다.꿣꿣꿣꿣다음 예제는 HTML 주석 안에 또 다른 주석을 삽입하는 예제입니다.꿣꿣꿣위의 예제처럼 HTML 주석 안에 또 다른 주석을 삽입하면, 삽입한 주석의 종료 태그(-->)를 첫 번째 주석이 자신의 종료 태그로 인식하게 됩니다.꿣꿣따라서 삽입한 주석의 종료 태그 다음부터 첫 번째 주석의 종료 태그까지의 모든 내용이 그대로 웹 페이지에 노출됩니다.꿣꿣꿣꿣그러므로 HTML 주석은 절대로 중첩해서 사용해서는 안 됩니다.",
    "[2-5] 주석_ex": "<!-- 작성자 : 홍길동 -->꿣<p>이 부분은 조금 어려운 코드입니다.</p><!--꿣꿣꿣 위와 같이 어려운 코드의 이해를 돕기 위해서 개발자가 적어놓은 설명입니다.꿣-->꿣꿣꿣<p>이 부분은 조금 어려운 코드입니다.</p><!--꿣꿣    <!-- 주석 안에 또 다른 주석을 삽입했습니다. -->꿣꿣    위와 같이 어려운 코드의 이해를 돕기 위해서 개발자가 적어놓은 설명입니다.꿣-->",
    "[2-6] 엔티티": "엔티티(Entity)꿣HTML에는 미리 예약된 몇몇 문자가 있으며, 이러한 문자를 HTML 예약어(reserved characters)라고 부릅니다.꿣꿣이러한 HTML 예약어를 HTML 코드에서 사용하면, 웹 브라우저는 그것을 평소와는 다른 의미로 해석합니다.꿣꿣따라서 HTML 예약어를 기존에 사용하던 의미 그대로 사용하기 위해 별도로 만든 문자셋을 엔티티(entity)라고 합니다.꿣꿣꿣엔티티의 형태는 다음과 같습니다.꿣꿣문법꿣&엔티티이름;꿣또는꿣&#엔티티숫자;꿣 꿣꿣다음 예제는 HTML 코드 내에서 꺾쇠괄호(<>)를 사용하면 웹 브라우저가 그것을 어떻게 해석하는지 보여줍니다.꿣꿣꿣꿣위의 예제처럼 HTML 코드에서 사용된 꺾쇠괄호(<>)는 HTML 태그의 시작과 끝의 의미로 해석됩니다.꿣꿣꿣꿣엔티티(entity)의 이름은 대소문자를 구분합니다.꿣 꿣꿣HTML에서 제공하는 대표적인 엔티티(entity)는 다음과 같습니다.꿣엔티티 문자    엔티티 이름    16진수 엔티티 숫자    설명꿣     &nbsp;    &#160;    줄 바꿈 없는 공백꿣<    &lt;    &#60;    보다 작은꿣>    &gt;    &#62;    보다 큰꿣&    &amp;    &#38;    AND 기호꿣'  &quot;    &#34;    큰따옴표꿣*    &apos;    &#39;    작은따옴표꿣꿣HTML에서 사용할 수 있는 모든 엔티티에 대한 더 자세한 정보를 원한다면, W3C 공식 사이트를 방문하여 확인할 수 있습니다.꿣꿣꿣꿣Character entity references in HTML => https://www.w3.org/TR/html4/sgml/entities.html꿣꿣발음 구별 부호(diacritical marks)꿣발음을 나타내는 부호를 악센트(accent)라고 합니다.꿣꿣이러한 악센트는 단독으로는 사용하지 않으며, 보통 다른 문자와 함께 사용됩니다.꿣꿣이것을 정확하게 표현하기 위하여 HTML에서는 다음과 같은 발음 구별 부호를 별도로 제공하고 있습니다.꿣꿣꿣꿣꿣HTML에서 제공하는 대표적인 발음 구별 부호(diacritical marks)는 다음과 같습니다.꿣꿣발음 구별 부호    문자    16진수 엔티티    결과꿣     ̀      a    a&#768;    à꿣      ́     a    a&#769;    á꿣        ̂    a    a&#770;    â꿣        ̃    a    a&#771;    ã꿣        ̀    O    O&#768;    Ò꿣        ́    O    O&#769;    Ó꿣        ̂    O    O&#770;    Ô꿣        ̃    O    O&#771;    Õ꿣꿣꿣심볼(Symbol) 특수문자꿣HTML 예약어 이외에도 키보드에 입력할 수 없는 문자를 표현하기 위한 심볼 특수문자를 사용할 수 있습니다.꿣꿣이러한 심볼 특수문자에는 수학 용어, 그리스 문자, 국제 통화 등이 있습니다.꿣꿣 꿣꿣HTML에서 제공하는 대표적인 심볼(Symbol) 특수문자는 다음과 같습니다.꿣꿣심볼 특수문자    엔티티 이름    16진수 엔티티    설명꿣¢    &cent;    &#162;    센트꿣£    &pound;    &#163;    파운드화꿣¥    &yen;    &#165;    엔화꿣€    &euro;    &#8364;    유로화꿣©    &copy;    &#169;    저작권꿣®    &reg;    &#174;    등록상표꿣×    &times;    &#215;    곱셈꿣÷    &divide;    &#247;    나눗셈",
    "[2-6] 엔티티_ex": "<p><p> 태그는 두 번째로 큰 제목을 나타내는 태그입니다.</p>꿣꿣    <p>&lt;p&gt;태그는 단락을 나타내는 태그입니다.</p>",
    "[2-7] 문자셋": "문자셋(Character set)꿣웹 브라우저가 HTML 문서를 정확하게 나타내기 위해서는 해당 문서가 어떠한 문자셋으로 저장되었는지를 알아야 합니다.꿣꿣따라서 HTML 문서가 저장될 때 사용된 문자셋에 대한 정보를 <head>태그 내의 <meta>태그에 명시합니다.꿣꿣 꿣꿣HTML4에서 UTF-8의 경우 : <meta http-equiv='Content-Type' content='text/html;charset=UTF-8'> 꿣 꿣HTML5에서 UTF-8의 경우 : <meta charset='UTF-8'>꿣꿣위의 두 예제는 해당 HTML 문서가 UTF-8 문자셋을 사용하여 저장되었음을 웹 브라우저에 알려줍니다.꿣꿣문자셋의 종류꿣현재 사용되는 대표적인 문자셋(character set)은 다음과 같습니다.꿣꿣꿣꿣1. ASCII : 가장 처음 만들어진 문자셋으로, 인터넷에서 사용할 수 있는 127개의 영문자와 숫자로 이루어져 있습니다.꿣꿣2. ANSI : 윈도우즈에서 만든 문자셋으로, 총 256개의 문자 코드를 지원합니다.꿣꿣3. ISO-8859-1 : 256개의 문자 코드를 지원하는 HTML4의 기본 문자셋입니다.꿣꿣4. UTF-8 : 세상에 있는 거의 모든 문자를 표현할 수 있는 유니코드 문자를 지원하는 HTML5의 기본 문자셋입니다.",
    "[2-7] 문자셋_ex": "예제가 없습니다.",
    "[3-1] HTML 스타일": "HTML 스타일(Style)꿣HTML 요소의 style 속성(attribute)을 이용하면 CSS 스타일을 HTML 요소에 직접 설정할 수 있습니다.꿣꿣하지만 이러한 style 속성을 이용한 방법은 오직 단 하나의 HTML 요소에만 스타일을 적용할 수 있습니다.꿣꿣문법 예시꿣<태그이름 style='속성이름:속성값'>꿣꿣배경색 변경꿣다음 예제는 style 속성을 이용하여 배경색을 변경하는 예제입니다.꿣꿣꿣글자색 변경꿣다음 예제는 style 속성을 이용하여 글자색을 변경하는 예제입니다.꿣꿣글자 크기 변경꿣다음 예제는 style 속성을 이용하여 글자 크기를 변경하는 예제입니다.꿣꿣꿣문단 정렬 변경꿣다음 예제는 style 속성을 이용하여 문단 정렬을 변경하는 예제입니다.꿣꿣꿣여러 스타일의 설정꿣style 속성을 이용하여 여러 CSS 스타일을 한 번에 적용할 수 있습니다.꿣꿣꿣꿣tip : style 속성값에 사용되는 CSS 속성(property)과 속성값들은 세미콜론(;)을 이용하여 구분합니다.꿣tip : CSS 속성을 하나만 사용할 때나, 여러 개의 CSS 속성 중 맨 마지막 CSS 속성은 세미콜론(;)을 생략할 수 있습니다.꿣style 속성값에 사용되는 CSS 속성(property)과 속성값들은 세미콜론(;)을 이용하여 구분합니다.꿣CSS 속성을 하나만 사용할 때나, 여러 개의 CSS 속성 중 맨 마지막 CSS 속성은 세미콜론(;)을 생략할 수 있습니다.꿣꿣tip : HTML4에서 UTF-8의 경우 : <meta http-equiv='Content-Type' content='text/html;charset=UTF-8'>꿣tip : HTML5에서 UTF-8의 경우 : <meta charset='UTF-8'>꿣꿣tip : 엔티티(entity)의 이름은 대소문자를 구분합니다.꿣tip : 익스플로러는 마우스 오른쪽을 누른 후 소스 보기를 통해서, 크롬과 파이어폭스에서는 F12 버튼으로 HTML 코드를 확인할 수 있습니다.꿣꿣tip : <p>태그의 위아래로는 약간의 여백(margin)이 자동으로 삽입됩니다.꿣tip : <pre>태그 내에 작성된 텍스트의 글꼴(font)은 고정폭 글꼴(fixed-width font)로 자동변환됩니다.꿣tip : <h>태그의 위아래로는 약간의 여백이 자동으로 삽입됩니다.꿣꿣tip : HTML 문서의 제목에 해당하는 부분을 <big>태그나 <bold>태그를 사용하여 표현하지 않도록 합니다.꿣tip : <img>태그의 alt 속성은 이미지를 불러올 수 없는 상황에서 이미지 대신 보이는 문자열을 설정할 수 있습니다.꿣tip : <img> <br> <hr> 등과 같이 종료 태그 없이 시작 태그만을 가지는 태그를 빈 태그(empty tag)라고 합니다",
    "[3-1] HTML 스타일_ex": "<h1 style='background-color:white'>꿣꿣   style 속성을 이용한 배경색 변경꿣꿣</h1>꿣꿣꿣<h1 style='color:maroon'>꿣style 속성을 이용한 글자색 변경꿣꿣</h1>꿣꿣꿣<h1 style='font-size:250%''>꿣style 속성을 이용한 글자 크기 변경꿣꿣</h1>꿣꿣꿣<h1 style='text-align:center'>꿣꿣    style 속성을 이용한 문단 정렬 변경꿣꿣</h1>꿣꿣꿣<h1 style='background-color:white; color:maroon; font-size:150%; text-align:center'>style 속성을 이용하여 한 번에 스타일링 하기!</h1>",
    "[3-2] HTML 색": "HTML 색(Color) 표현꿣HTML에서 색을 표현하는 방법은 다음과 같이 세 가지 방법이 있습니다. 꿣꿣꿣1. 색상 이름으로 표현꿣꿣2. RGB 색상값으로 표현꿣꿣3. 16진수 색상값으로 표현꿣꿣색상 이름으로 표현꿣W3C에서 정의한 16개의 HTML4 표준 색상 이름은 다음과 같습니다.꿣현재는 주요 브라우저가 140개의 색상 이름을 모두 지원하고 있습니다.꿣RGB 색상값으로 표현꿣모니터나 스크린은 빨간색(Red), 녹색(Green), 파란색(Blue)을 혼합하여 색을 표현합니다.꿣꿣HTML에서도 위와 같이 세 가지 색을 가지고 색을 표현하는 RGB 색상을 사용합니다.꿣꿣RGB 색상의 기본색(Red, Green, Blue)은 각각 0부터 255까지의 범위를 가집니다.꿣16진수 색상값으로 표현꿣16진수 색상값은 RGB 색상값을 각각 16진수로 변환한 것입니다.꿣꿣따라서 각각의 기본색(Red, Green, Blue)은 각각 00부터 FF까지의 범위를 가집니다.꿣꿣꿣꿣예를 들면, 빨간색을 나타내는 RGB 색상값인 rgb(255,0,0)은 16진수 색상값으로는 #FF0000이 되는 것입니다.",
    "[3-2] HTML 색_ex": "<h1 style='color:blue'>색상 이름으로 표현된 파란색</h1>꿣꿣<h1 style='color:green'>색상 이름으로 표현된 녹색</h1>꿣꿣<h1 style='color:silver'>색상 이름으로 표현된 은색</h1>꿣꿣<h1 style='color:teal'>색상 이름으로 표현된 청록색</h1>꿣꿣<h1 style='color:red'>색상 이름으로 표현된 빨간색</h1>꿣꿣꿣<h1 style='color:rgb(0,0,255)''>RGB 색상값으로 표현된 파란색</h1>꿣꿣<h1 style='color:rgb(0,128,0)''>RGB 색상값으로 표현된 녹색</h1>꿣꿣<h1 style='color:rgb(192,192,192)'>RGB 색상값으로 표현된 은색</h1>꿣꿣<h1 style='color:rgb(0,128,128)''>RGB 색상값으로 표현된 청록색</h1>꿣꿣<h1 style='color:rgb(255,0,0)'>RGB 색상값으로 표현된 빨간색</h1>꿣꿣꿣꿣<h1 style='color:#0000FF'>16진수 색상값으로 표현된 파란색</h1>꿣꿣<h1 style='color:#008000'>16진수 색상값으로 표현된 녹색</h1>꿣꿣<h1 style='color:#C0C0C0'>16진수 색상값으로 표현된 은색</h1>꿣꿣<h1 style='color:#008080'>16진수 색상값으로 표현된 청록색</h1>꿣꿣<h1 style='color:#FF0000'>16진수 색상값으로 표현된 빨간색</h1>",
    "[1-1] CSS 개요": "웹 페이지의 스타일과 내용적인 부분을 서로 분리해 놓은 서식을 스타일 시트라고 합니다.꿣꿣이러한 스타일 시트를 이용하면 웹 페이지의 스타일을 편리하게 개발할 수 있습니다.꿣여러분이 직접 코드를 변경하고, 그 결과를 확인할 수 있는 온라인 에디터가 준비되어 있습니다.",
    "[1-1] CSS 개요_ex": "<style>꿣꿣    body {꿣꿣        background-color: silver;꿣꿣    }꿣꿣    h1 {꿣꿣        font-family: 'Times New Roman', Georgia, Serif;꿣꿣        text-align: center;꿣꿣    }꿣꿣    p {꿣꿣        color: #663399;꿣꿣        text-decoration:underline;꿣꿣        font-weight: bold;꿣꿣    }꿣꿣</style>",
    "[1-2] CSS 기초": "CSS를 배우기 위한 사전지식꿣CSS를 배우기 전에 여러분은 다음과 같은 기초 지식이 필요합니다.꿣꿣꿣- HTML꿣- XHTML꿣꿣꿣CSS란?꿣CSS는 Cascading Style Sheets의 약자입니다.꿣꿣CSS는 HTML 요소들이 각종 미디어에서 어떻게 보이는가를 정의하는 데 사용되는 스타일 시트 언어입니다.꿣꿣HTML4 부터는 이러한 모든 서식 설정을 HTML 문서로부터 따로 분리하는 것이 가능해졌습니다.꿣꿣오늘날 대부분의 웹 브라우저들은 모두 CSS를 지원하고 있습니다.꿣꿣CSS를 사용하는 이유꿣HTML만으로 웹 페이지를 제작할 경우 HTML 요소의 세부 스타일을 일일이 따로 지정해 주어야만 합니다.꿣꿣이 작업은 매우 많은 시간이 걸리며, 완성한 후에도 스타일의 변경 및 유지 보수가 매우 힘들어집니다.꿣꿣이러한 문제점을 해소하기 위해 W3C(World Wide Web Consortium)에서 만든 스타일 시트 언어가 바로 CSS입니다.꿣꿣꿣꿣CSS는 웹 페이지의 스타일을 별도의 파일로 저장할 수 있게 해주므로 사이트의 전체 스타일을 손쉽게 제어할 수 있습니다.꿣꿣또한, 웹 사이트의 스타일을 일관성 있게 유지할 수 있게 해주며, 그에 따른 유지 보수 또한 쉬워집니다.꿣꿣이러한 외부 스타일 시트는 보통 확장자를 .css 파일로 저장합니다.꿣꿣CSS 버전꿣인터넷의 발전에 따라 CSS는 현재까지 새로운 버전이 계속해서 발표되고 있습니다.꿣꿣꿣꿣1996년에 최초의 CSS1이 W3C 표준 권고안으로 제정됩니다.꿣꿣그 이후 1998년에 CSS2가 발표되었으며, 2005년부터는 현재 사용 중인 CSS3가 개발되고 있습니다.꿣꿣CSS는 현재 모듈(module)별로 개발되고 있으며, 브라우저 공급자가 지원할 모듈을 자유롭게 선택할 수 있도록 하고 있습니다.꿣꿣따라서 현재 최신 버전의 CSS 표준 권고안은 CSS Level 2 Revision 1 (CSS 2.1)입니다.꿣꿣꿣꿣최신 버전의 CSS 표준 권고안에 대한 더 자세한 정보를 원한다면, W3C 공식 사이트를 방문하여 확인할 수 있습니다.꿣꿣꿣W3C CSS Snapshot 2017 : W3C Working Group Note, 31 January 2017 => https://www.w3.org/TR/CSS/꿣꿣꿣꿣CSS 표준 권고안의 모듈별 현재 상태에 대해 자세히 알고 싶다면, 다음 링크를 방문하여 확인할 수 있습니다.꿣꿣 꿣꿣W3C CSS current work & how to participate => https://www.w3.org/Style/CSS/current-work",
    "[1-2] CSS 기초_ex": "예제가 없습니다.",
    "[1-3] CSS 문법": "CSS의 문법은 선택자(selector)와 선언부(declaratives)로 구성됩니다.꿣꿣선택자는 CSS를 적용하고자 하는 HTML 요소(element)를 가리킵니다.꿣꿣선언부는 하나 이상의 선언들을 세미콜론(;)으로 구분하여 포함할 수 있으며, 중괄호({ })를 사용하여 전체를 둘러쌉니다.꿣꿣각 선언은 CSS 속성명(property)과 속성값(value)을 가지며, 그 둘은 콜론(:)으로 연결됩니다.꿣꿣이러한 CSS 선언(declaration)은 언제나 마지막에 세미콜론(;)으로 끝마칩니다.꿣꿣CSS 선택자꿣스타일을 적용할 HTML 요소를 가리키는 데 사용하는 선택자는 다음과 같습니다.꿣꿣꿣꿣- HTML 요소 선택자꿣꿣- 아이디(id) 선택자꿣꿣- 클래스(class) 선택자꿣꿣- 그룹(group) 선택자꿣꿣HTML 요소 선택자꿣CSS를 적용할 대상으로 HTML 요소의 이름을 직접 사용하여 선택할 수 있습니다.꿣꿣꿣아이디(id) 선택자꿣아이디 선택자는 CSS를 적용할 대상으로 특정 요소를 선택할 때 사용합니다.꿣꿣이 선택자는 웹 페이지에 포함된 여러 요소 중에서 특정 아이디 이름을 가지는 요소만을 선택해 줍니다.꿣꿣HTML과 CSS에서는 하나의 웹 페이지에 속하는 여러 요소에 같은 아이디 이름을 사용해도 별 문제없이 동작합니다.꿣꿣하지만 이렇게 중복된 아이디를 가지고 자바스크립트 작업을 하게 되면 오류가 발생합니다.꿣꿣따라서 되도록이면 하나의 웹 페이지에 속하는 요소에는 다른 아이디 이름을 사용하거나 클래스를 사용하는 것이 좋습니다.꿣클래스(class) 선택자꿣클래스 선택자는 특정 집단의 여러 요소를 한 번에 선택할 때 사용합니다.꿣꿣이러한 특정 집단을 클래스(class)라고 하며, 같은 클래스 이름을 가지는 요소들을 모두 선택해 줍니다.꿣꿣꿣그룹(group) 선택자꿣그룹 선택자는 위에서 언급한 여러 선택자를 같이 사용하고자 할 때 사용합니다.꿣그룹 선택자는 여러 선택자를 쉼표(,)로 구분하여 연결합니다.꿣꿣이러한 그룹 선택자는 코드를 중복해서 작성하지 않도록 하여 코드를 간결하게 만들어 줍니다.꿣꿣꿣CSS 주석(comments)꿣주석(comment)이란 개발자가 작성한 해당 코드에 대한 이해를 돕는 설명이나 디버깅을 위해 작성한 구문을 의미합니다.꿣꿣이러한 주석은 다른 CSS 코드와는 달리 웹 브라우저에 의해 해석되지 않습니다.꿣꿣꿣꿣CSS에서 주석을 표현하는 방법은 다음과 같습니다.꿣문법꿣/& 주석내용 /꿣꿣 꿣꿣꿣꿣꿣tip: CSS에서 주석을 작성할 때는 절대로 주석 내부에 또 다른 주석을 넣어서는 안 됩니다.꿣꿣꿣꿣다음 예제는 첫 번째 주석 안에 한 줄짜리 두 번째 주석을 삽입한 예제입니다.꿣꿣이때 첫 번째 주석의 두 번째 라인은 두 번째 주석의 / 기호로 인해 정상적인 주석으로 인식되지 못합니다.",
    "[1-3] CSS 문법_ex": "<style>꿣꿣    #heading { color: teal; text-decoration: line-through; }꿣꿣</style>꿣꿣...꿣꿣<h2 id='heading'>이 부분에 스타일을 적용합니다.</h2>꿣꿣꿣꿣꿣<style>꿣꿣  .headings { color: lime; text-decoration: overline; }꿣꿣</style>꿣꿣...꿣꿣<h2 class='headings'>이 부분에 스타일을 적용합니다.</h2>꿣꿣<p>class 선택자를 이용하여 스타일을 적용할 HTML 요소들을 한 번에 선택할 수 있습니다.</p>꿣꿣<h3 class='headings'>이 부분에도 같은 스타일을 적용합니다.</h3>꿣꿣꿣꿣<style>꿣꿣    h1 { color: navy; }꿣꿣    h1, h2 { text-align: center; }꿣꿣    h1, h2, p { background-color: lightgray; }꿣꿣</style>꿣꿣꿣꿣<style>꿣꿣p { color: teal; /이것은 한 줄짜리 주석입니다./ font-size: 30px; }꿣꿣/ 꿣꿣이것은 두 줄짜리 주석입니다.꿣꿣몇 줄이라도 가능합니다. 꿣꿣&/꿣/꿣꿣첫 번째 주석의 첫 번째 라인입니다. /& 두 번째 주석입니다. &/꿣꿣첫 번째 주석의 두 번째 라인입니다.꿣꿣&/</style>",
    "[1-4] CSS 적용": "CSS를 적용하는 방법꿣HTML 문서에 CSS 스타일을 적용할 때에는 다음과 같이 세 가지 방법을 사용할 수 있습니다.꿣꿣 꿣꿣1. 인라인 스타일(Inline style)꿣꿣2. 내부 스타일 시트(Internal style sheet)꿣꿣3. 외부 스타일 시트(External style sheet)꿣꿣인라인 스타일(Inline style)꿣인라인 스타일이란 HTML 요소 내부에 style 속성을 사용하여 CSS 스타일을 적용하는 방법입니다.꿣꿣이러한 인라인 스타일은 해당 요소에만 스타일을 적용할 수 있습니다.꿣꿣꿣tip : 이 방식은 한 번 설정된 스타일을 변경하기가 매우 어려우며, 스타일 시트를 사용하는 많은 이점을 잃게 됩니다. 꿣꿣따라서 이 방식은 될 수 있으면 꼭 필요한 경우에만 사용해야 합니다.꿣내부 스타일 시트(Internal style sheet)꿣내부 스타일 시트를 이용하는 방법은 HTML 문서 내의 <head>태그에 <style>태그를 사용하여 CSS 스타일을 적용합니다.꿣꿣이러한 내부 스타일 시트는 해당 HTML 문서에만 스타일을 적용할 수 있습니다.꿣꿣외부 스타일 시트(External style sheet)꿣외부 스타일 시트를 이용하는 방법은 웹 사이트 전체의 스타일을 하나의 파일에서 변경할 수 있도록 해줍니다.꿣꿣외부에 작성된 이러한 스타일 시트 파일은 .css 확장자를 사용하여 저장됩니다.꿣꿣스타일을 적용할 웹 페이지의 <head>태그에 <link>태그를 사용하여 외부 스타일 시트를 포함해야만 스타일이 적용됩니다.꿣꿣꿣스타일 적용의 우선순위꿣위에서 설명한 스타일 적용 방법들이 혼합되어 사용될 경우, 최종적으로 적용되는 스타일은 다음 순서에 따라 결정됩니다.꿣꿣꿣꿣1. 인라인 스타일 (HTML 요소 내부에 위치함)꿣꿣2. 내부 / 외부 스타일 시트 (HTML 문서의 head 요소 내부에 위치함)꿣꿣3. 웹 브라우저 기본 스타일꿣꿣 꿣꿣예를 들어 인라인 스타일이 적용된 태그는 내부나 외부 스타일 시트와는 상관없이 무조건 인라인 스타일이 적용됩니다.꿣꿣또한, 내부 스타일 시트와 외부 스타일 시트는 가장 마지막에 적용된 스타일 시트가 적용됩니다.꿣꿣꿣꿣꿣꿣꿣따라서 웹 사이트의 스타일 적용은 외부 스타일 시트를 사용하는 것이 유지 보수도 편하며, 가장 안정적입니다.꿣꿣하지만 우리 수업에서는 CSS 파일을 매번 보여줄 수 없으므로, 대부분의 예제에서 내부 스타일 시트를 사용할 것입니다.",
    "[1-4] CSS 적용_ex": "<body>꿣 꿣   <h2 style='color:green; text-decoration:underline'>꿣  꿣      인라인 스타일을 이용하여 스타일을 적용하였습니다.꿣  꿣  </h2>꿣꿣</body>꿣꿣꿣<head>꿣꿣  <style>꿣꿣       body { background-color: lightyellow; }꿣꿣        h2 { color: red; text-decoration: underline; }꿣꿣    </style>꿣꿣</head>꿣꿣꿣<head>꿣꿣   <link rel='stylesheet' href='/examples/media/expand_style.css'>꿣꿣</head>꿣꿣꿣<link rel='stylesheet' href='/examples/media/expand_style.css'>꿣꿣...꿣꿣<h2>이 부분은 외부 스타일 시트만이 적용됩니다.</h2>꿣꿣꿣<h2 style='color:maroon; text-decoration:line-through'> 이 부분은 인라인 스타일과 외부 스타일 시트가 둘 다 적용됩니다. </h2>",
    "[1-1] Node.js 개요": "Node.js를 시작해봅시다!꿣Visual Studio Code를 포털 사이트에 검색해서 설치합니다.꿣설치를 진행해 주시고, 확장팩에 클릭해주세요. Korean Language Pack for Visual Studio Code 설치해주세요.꿣포털사이트에서 node.js를검색해서 설치해주세요.꿣자기가 원하는 곳에 작업 폴더를 만들어 주세요.꿣우클릭해서 code로 열기 클릭 또는 Visual Studio Code에서파일(F)클릭해서 폴더를 열어주세요.꿣파일 web.js 파일을 만들어주시고, 터미널 클릭 -> 새 터미널 클릭  npm init 치고 엔터를 눌러주세요. -> npm i express 치고 다끝나면 web.js 파일을 열고 꿣꿣const express = require('express');꿣const app = express();꿣 app.listen(8080, function() {꿣    console.log('Listening on Port 8080')꿣  })꿣를 입력해주세요. 그 다음 강의에서 더 이어집니다!",
    "[1-1] Node.js 개요_ex": "https://github.com/ADASDASDAD34343/ThePrince",
    "[1-2] GET 요청하기": "터미널에 node web.js를 입력해주세요.꿣Node.js 가 실행됩니다.꿣제목이 index.html인 HTML 파일을 web.js와 같은 경로(폴더)에 넣어주세요.꿣그 다음에는, 이 코드로 web.js를 수정해주세요.꿣const express = require('express');꿣const app = express();꿣꿣꿣app.get('/',function(요청,응답){꿣  응답.sendFile(__dirname +'/index.html')꿣  꿣 })꿣 app.listen(8080, function() {꿣    console.log('listening on 8080')꿣  }) 꿣이 코드를 쓰시고 터미널에서 Ctrl+C를 눌러주세요.꿣그다음엔 다시 node web.js를 입력하신 후, 8080 포트에 node.js 서버가 열립니다. 꿣인테넷 브라우저에서 localhost:8080 접속시 자신이 만들었던 HTML이 화면이 보이게 됩니다.꿣지금 여려분들은 자신의  웹사이트 서버를 만드는데 성공했습니다!",
    "[1-2] GET 요청하기_ex": "const express = require('express');꿣const app = express();꿣꿣꿣app.get('/',function(요청,응답){꿣  응답.sendFile(__dirname +'/index.html')꿣  꿣 })꿣 app.listen(8080, function() {꿣    console.log('listening on 8080')꿣  }) ",
    "[1-1] Python 강의 개요": "안녕하세요. 만나서 반갑습니다.꿣저는 여러분들을 앞으로 안내할 사람, 0x617274입니다.꿣꿣+ NOTICE!꿣꿣시작하기 전에, 이 강의는 프로그래밍 언어를 꼭 알지 않아도 됩니다꿣단순히 엔트리, 스크래치 와 같은 블록코딩을 하시던 분도 얼마든지 따라오실 수 있습니다.꿣꿣이 강의는  WINDOWS OS 10/11 기반으로 제작되었습니다.꿣Darwin(MACOS), LINUX( 1 or 2 )는 다른 강의에서 다룰 예정입니다.꿣+ NOTICE!꿣꿣꿣목차꿣1 > [ 프로그래밍 언어란 ? ]꿣2 > [ 저자는 어떤 사람인가 ? ]꿣3 > [ 파이썬은 무엇인가 ? ]꿣4 > [ 오늘 강의 끝! ]꿣꿣...꿣...꿣...꿣1 > [ 프로그래밍 언어란 ? ]꿣꿣꿣프로그래밍 언어란 무엇일까요?꿣많은 입문자 분들이 ' 프로그래밍 언어 중에서 어떤 프로그래밍 언어를 알아야 하나요? '라는 질문을 하십니다.꿣우리가 대화를 할 때,  꼭 한국어, 영어만 해야하나요?  아니죠.꿣프로그래밍 언어는 단지 우리의 언어를 프로그래밍으로 바꾼 것입니다.꿣그러니까 어떤 프로그래밍 언어를 사용하든, 난이도가 어떻든, 결국엔 프로그램을 하는 것에는 차이가 없습니다.꿣꿣즉, 프로그래밍 언어란 생각의 표현 방법 중 하나입니다.꿣꿣사람들이 흔히 어렵다고 하는 프로그래밍 언어가 좋은 것만은 아닙니다.꿣오히려 나를 가두는 케이지가 될 수 있죠.꿣꿣저희가 앞으로 배울 파이썬은, 한 기술에만 특화되지 않고 자유분방한 프로그래밍 언어입니다.꿣이 공부를 시작하신 것을 축하드리면서, 시작해보겠습니다.꿣...꿣...꿣...꿣2 > [ 저자는 어떤 사람인가 ? ]꿣꿣꿣임주원(minehammer26@gmail.com)꿣꿣한국인꿣꿣...ㅋ꿣......꿣...꿣3 > [ 파이썬은 무엇인가 ? ]꿣꿣앞서 나온 말들을 주변 지인들에게 말해주면 항상 대답은 이러하였습니다.꿣'그래서 파이썬이 뭔데?' 꿣저는 뭐 철학적으로 대답해야되나... 아님 기계적으로 대답해야 되나...꿣고민을 여러번 했습니다.꿣꿣하지만..ㅎ 저희는 철학을 배우러 온 것이 아니라, 코딩 이라는 공부를 하러 온 것이잖아요?꿣저희 방식대로 가봅시다.꿣꿣파이썬은 1990년에 만들어졌고, 인터프리터 언어입니다.꿣꿣여기서 잠깐! 인터프리터 언어란?꿣! > [ 인터프리터 언어 ]꿣-> 한 줄씩 소스 코드를 해석해서 바로바로 실행결과를 확인할 수 있는 언어입니다.꿣꿣게다가, 이 파이썬이란 녀석이 여러명이 함께 작업하고 계속 관리하기도 참 쉬웠습니다.꿣대표적인 예로 구글, 인스타그램, 드롭박스 등이 있습니다.꿣한 마디로, 프로그래밍 언어계의 '혁명' 인거죠.꿣꿣그래서 다음 부턴 우리는,  이 '혁명'을 경험해볼 것입니다.꿣꿣지금까지 길다면 길고, 짧다면 짧은 이 첫 강의를 들어주셔서 감사합니다.꿣그리고, 이제 우리의 여정을 시작해봅시다.",
    "[1-1] Python 강의 개요_ex": "예제가 없습니다."
  }